{
  "timestamp": "2025-06-22T17:07:51.542Z",
  "testSuite": "API Regression Suite",
  "totalTests": 0,
  "passedTests": 0,
  "failedTests": 1,
  "skippedTests": 0,
  "duration": 0,
  "details": {
    "error": "Command failed: npx jest --config jest.regression.config.js --verbose --detectOpenHandles --forceExit\nFAIL tests/api-regression-suite.test.ts (19.713 s)\n  API Regression Test Suite\n    John Deere API Tests\n      ✓ Basic field count query (2 ms)\n      ✓ Equipment listing query (1 ms)\n      ✓ Organization listing query (1 ms)\n      ✓ Operations history query (1 ms)\n      ✓ Comprehensive farm data query (1 ms)\n      ✓ Field boundary data query (1 ms)\n    Weather API Tests\n      ✕ Current weather query (2559 ms)\n      ✕ Weather forecast query (2354 ms)\n      ✕ Location-specific weather query (3076 ms)\n      ✓ Spray conditions weather query (2040 ms)\n      ✓ Coordinate-based weather forecast (6250 ms)\n    Combined Multi-Source API Tests\n      ✓ Field-specific weather query (orchestrated) (3 ms)\n      ✓ Fields list with weather (4 ms)\n      ✓ Equipment and weather for operations (3 ms)\n      ✓ Farm overview with weather forecast (1 ms)\n      ✓ Field-specific spray decision query (1 ms)\n    Field Weather Orchestration\n      ✓ Field weather workflow should complete successfully (2 ms)\n    Error Handling Tests\n      ✓ Should handle invalid field names gracefully (1 ms)\n      ✓ Should handle weather API with invalid coordinates (2451 ms)\n\n  ● API Regression Test Suite › Weather API Tests › Current weather query\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"temperature\"\n    Received string:    \"i need a location or coordinates to provide you with the current weather. could you please provide one?\n    \"\n\n      315 |       if (scenario.shouldContain) {\n      316 |         for (const term of scenario.shouldContain) {\n    > 317 |           expect(content.toLowerCase()).toContain(term.toLowerCase())\n          |                                         ^\n      318 |         }\n      319 |       }\n      320 |       \n\n      at tests/api-regression-suite.test.ts:317:41\n\n  ● API Regression Test Suite › Weather API Tests › Weather forecast query\n\n    expect(received).toBeGreaterThanOrEqual(expected)\n\n    Expected: >= 150\n    Received:    145\n\n      303 |       // Check minimum response length\n      304 |       if (scenario.minResponseLength) {\n    > 305 |         expect(content.length).toBeGreaterThanOrEqual(scenario.minResponseLength)\n          |                                ^\n      306 |       }\n      307 |       \n      308 |       // Check expected function calls\n\n      at tests/api-regression-suite.test.ts:305:32\n\n  ● API Regression Test Suite › Weather API Tests › Location-specific weather query\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"temperature\"\n    Received string:    \"i am sorry, i am unable to retrieve weather information for \\\"iowa city, ia\\\". the location was not found. please provide a valid location.\n    \"\n\n      315 |       if (scenario.shouldContain) {\n      316 |         for (const term of scenario.shouldContain) {\n    > 317 |           expect(content.toLowerCase()).toContain(term.toLowerCase())\n          |                                         ^\n      318 |         }\n      319 |       }\n      320 |       \n\n      at tests/api-regression-suite.test.ts:317:41\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 16 passed, 19 total\nSnapshots:   0 total\nTime:        19.842 s\nRan all test suites.\n\nJest has detected the following 1 open handle potentially keeping Jest from exiting:\n\n  ●  TCPWRAP\n\n      155 | async function sendChatMessage(question: string, selectedDataSources: string[] = ['weather', 'johndeere']) {\n      156 |   // Use the test endpoint that bypasses authentication\n    > 157 |   const response = await fetch(`${BASE_URL}/api/test/chat-completion`, {\n          |                          ^\n      158 |     method: 'POST',\n      159 |     headers: {\n      160 |       'Content-Type': 'application/json',\n\n      at node_modules/node-fetch/lib/index.js:1478:15\n      at fetch (node_modules/node-fetch/lib/index.js:1447:9)\n      at sendChatMessage (tests/api-regression-suite.test.ts:157:26)\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:451:28)\n\n",
    "stdout": "jest-haste-map: Watchman crawl failed. Retrying once with node crawler.\n  Usually this happens when watchman isn't running. Create an empty `.watchmanconfig` file in your project's root folder or initialize a git or hg repository in your project.\n  Error: Watchman error: std::__1::system_error: open: /Users/Evgeny/Documents/Projects/AgMCP: Operation not permitted. Make sure watchman is running for this project. See https://facebook.github.io/watchman/docs/troubleshooting.\n  console.log\n    🚀 Starting API Regression Test Suite\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:210:13)\n\n  console.log\n    📍 Testing against: http://localhost:3000\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:211:13)\n\n  console.log\n    🚜 John Deere API: ❌ Not Connected\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:217:13)\n\n  console.log\n    🌤️  Weather API: ✅ Available\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:218:13)\n\n  console.log\n    📝 Using test session ID: test-session-1750612073728\n\n      at createTestSession (tests/api-regression-suite.test.ts:179:11)\n\n  console.log\n    📝 Created test session: test-session-1750612073728\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:222:13)\n\n  console.log\n    ⏭️  Skipping John Deere test: Basic field count query (not connected)\n\n      at tests/api-regression-suite.test.ts:235:17\n\n  console.log\n    ⏭️  Skipping John Deere test: Equipment listing query (not connected)\n\n      at tests/api-regression-suite.test.ts:235:17\n\n  console.log\n    ⏭️  Skipping John Deere test: Organization listing query (not connected)\n\n      at tests/api-regression-suite.test.ts:235:17\n\n  console.log\n    ⏭️  Skipping John Deere test: Operations history query (not connected)\n\n      at tests/api-regression-suite.test.ts:235:17\n\n  console.log\n    ⏭️  Skipping John Deere test: Comprehensive farm data query (not connected)\n\n      at tests/api-regression-suite.test.ts:235:17\n\n  console.log\n    ⏭️  Skipping John Deere test: Field boundary data query (not connected)\n\n      at tests/api-regression-suite.test.ts:235:17\n\n  console.log\n    🌤️  Testing: What's the current weather?\n\n      at tests/api-regression-suite.test.ts:290:15\n\n  console.log\n    🌤️  Testing: Give me the weather forecast for the next 7 days\n\n      at tests/api-regression-suite.test.ts:290:15\n\n  console.log\n    🌤️  Testing: What's the weather in Iowa City?\n\n      at tests/api-regression-suite.test.ts:290:15\n\n  console.log\n    🌤️  Testing: Should I spray today? Check the weather conditions\n\n      at tests/api-regression-suite.test.ts:290:15\n\n  console.log\n    ✅ Weather test passed: Spray conditions weather query\n\n      at tests/api-regression-suite.test.ts:327:15\n\n  console.log\n    🌤️  Testing: Get weather forecast for coordinates 41.6, -91.5\n\n      at tests/api-regression-suite.test.ts:290:15\n\n  console.log\n    ✅ Weather test passed: Coordinate-based weather forecast\n\n      at tests/api-regression-suite.test.ts:327:15\n\n  console.log\n    ⏭️  Skipping Combined test: Field-specific weather query (orchestrated) (missing connections)\n\n      at tests/api-regression-suite.test.ts:337:17\n\n  console.log\n    ⏭️  Skipping Combined test: Fields list with weather (missing connections)\n\n      at tests/api-regression-suite.test.ts:337:17\n\n  console.log\n    ⏭️  Skipping Combined test: Equipment and weather for operations (missing connections)\n\n      at tests/api-regression-suite.test.ts:337:17\n\n  console.log\n    ⏭️  Skipping Combined test: Farm overview with weather forecast (missing connections)\n\n      at tests/api-regression-suite.test.ts:337:17\n\n  console.log\n    ⏭️  Skipping Combined test: Field-specific spray decision query (missing connections)\n\n      at tests/api-regression-suite.test.ts:337:17\n\n  console.log\n    ⏭️  Skipping Field Weather Orchestration test (missing connections)\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:386:17)\n\n  console.log\n    ⏭️  Skipping error handling test (John Deere not connected)\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:426:17)\n\n  console.log\n    ✅ Weather error handling test passed\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:462:15)\n\n  console.log\n    🏁 API Regression Test Suite completed\n\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:226:13)\n\n",
    "stderr": "FAIL tests/api-regression-suite.test.ts (19.713 s)\n  API Regression Test Suite\n    John Deere API Tests\n      ✓ Basic field count query (2 ms)\n      ✓ Equipment listing query (1 ms)\n      ✓ Organization listing query (1 ms)\n      ✓ Operations history query (1 ms)\n      ✓ Comprehensive farm data query (1 ms)\n      ✓ Field boundary data query (1 ms)\n    Weather API Tests\n      ✕ Current weather query (2559 ms)\n      ✕ Weather forecast query (2354 ms)\n      ✕ Location-specific weather query (3076 ms)\n      ✓ Spray conditions weather query (2040 ms)\n      ✓ Coordinate-based weather forecast (6250 ms)\n    Combined Multi-Source API Tests\n      ✓ Field-specific weather query (orchestrated) (3 ms)\n      ✓ Fields list with weather (4 ms)\n      ✓ Equipment and weather for operations (3 ms)\n      ✓ Farm overview with weather forecast (1 ms)\n      ✓ Field-specific spray decision query (1 ms)\n    Field Weather Orchestration\n      ✓ Field weather workflow should complete successfully (2 ms)\n    Error Handling Tests\n      ✓ Should handle invalid field names gracefully (1 ms)\n      ✓ Should handle weather API with invalid coordinates (2451 ms)\n\n  ● API Regression Test Suite › Weather API Tests › Current weather query\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"temperature\"\n    Received string:    \"i need a location or coordinates to provide you with the current weather. could you please provide one?\n    \"\n\n      315 |       if (scenario.shouldContain) {\n      316 |         for (const term of scenario.shouldContain) {\n    > 317 |           expect(content.toLowerCase()).toContain(term.toLowerCase())\n          |                                         ^\n      318 |         }\n      319 |       }\n      320 |       \n\n      at tests/api-regression-suite.test.ts:317:41\n\n  ● API Regression Test Suite › Weather API Tests › Weather forecast query\n\n    expect(received).toBeGreaterThanOrEqual(expected)\n\n    Expected: >= 150\n    Received:    145\n\n      303 |       // Check minimum response length\n      304 |       if (scenario.minResponseLength) {\n    > 305 |         expect(content.length).toBeGreaterThanOrEqual(scenario.minResponseLength)\n          |                                ^\n      306 |       }\n      307 |       \n      308 |       // Check expected function calls\n\n      at tests/api-regression-suite.test.ts:305:32\n\n  ● API Regression Test Suite › Weather API Tests › Location-specific weather query\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"temperature\"\n    Received string:    \"i am sorry, i am unable to retrieve weather information for \\\"iowa city, ia\\\". the location was not found. please provide a valid location.\n    \"\n\n      315 |       if (scenario.shouldContain) {\n      316 |         for (const term of scenario.shouldContain) {\n    > 317 |           expect(content.toLowerCase()).toContain(term.toLowerCase())\n          |                                         ^\n      318 |         }\n      319 |       }\n      320 |       \n\n      at tests/api-regression-suite.test.ts:317:41\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 16 passed, 19 total\nSnapshots:   0 total\nTime:        19.842 s\nRan all test suites.\n\nJest has detected the following 1 open handle potentially keeping Jest from exiting:\n\n  ●  TCPWRAP\n\n      155 | async function sendChatMessage(question: string, selectedDataSources: string[] = ['weather', 'johndeere']) {\n      156 |   // Use the test endpoint that bypasses authentication\n    > 157 |   const response = await fetch(`${BASE_URL}/api/test/chat-completion`, {\n          |                          ^\n      158 |     method: 'POST',\n      159 |     headers: {\n      160 |       'Content-Type': 'application/json',\n\n      at node_modules/node-fetch/lib/index.js:1478:15\n      at fetch (node_modules/node-fetch/lib/index.js:1447:9)\n      at sendChatMessage (tests/api-regression-suite.test.ts:157:26)\n      at Object.<anonymous> (tests/api-regression-suite.test.ts:451:28)\n\n"
  }
}